{"version":3,"sources":["webpack:///./js/script.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","loggerTwo","updatedUsers","table","logSuccess","id","logError","warn","makeTransaction","transaction","reject","min","max","Math","floor","random","amount","catch"],"mappings":"0NACMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAQF,QAG7CI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,QAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAC,GAIjBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM7DC,EAAY,SAAAC,GAAY,OAAIZ,QAAQa,MAAMD,IAGhDN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAGnC,IAIMG,EAAa,SAAC,GAAiB,IAAfC,EAAe,EAAfA,GAAIhB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2Bc,EAA3B,iBAA8ChB,EAA9C,QAGIiB,EAAW,SAAAD,GACff,QAAQiB,KAAR,gCAA6CF,EAA7C,8BAGIG,EAAkB,SAAAC,GACtB,OAAO,IAAIxB,SAAQ,SAACC,EAASwB,GAC3B,IAd+BC,EAAKC,EAc9B7B,GAdyB4B,EAcS,IAdJC,EAcS,IAbxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAclDxB,YAAW,WACU0B,KAAKE,SAAW,GAE/B7B,EAAQ,CAAEmB,GAAII,EAAYJ,GAAIhB,KAAMN,IACpC2B,EAAOD,EAAYJ,MACtBtB,OAKPyB,EAAgB,CAAEH,GAAI,GAAIW,OAAQ,MAAOxB,KAAKY,GAAYa,MAAMX,GAChEE,EAAgB,CAAEH,GAAI,GAAIW,OAAQ,MAAOxB,KAAKY,GAAYa,MAAMX,GAChEE,EAAgB,CAAEH,GAAI,GAAIW,OAAQ,KAAMxB,KAAKY,GAAYa,MAAMX,GAC/DE,EAAgB,CAAEH,GAAI,GAAIW,OAAQ,MAAOxB,KAAKY,GAAYa,MAAMX,K","file":"main.ba20abec3069b2002b8d.js","sourcesContent":["//  task 1\r\nconst delay = ms => {\r\n  return new Promise(resolve => setTimeout(resolve(ms)));\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time} ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n//  task 2\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst loggerTwo = updatedUsers => console.table(updatedUsers);\r\n\r\n// Вызовы функции для проверки\r\ntoggleUserState(users, 'Mango').then(loggerTwo);\r\ntoggleUserState(users, 'Lux').then(loggerTwo);\r\n\r\n//  task 3\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      canProcess\r\n        ? resolve({ id: transaction.id, time: delay })\r\n        : reject(transaction.id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\n// Вызовы функции для проверки\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}